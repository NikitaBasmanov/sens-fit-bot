import asyncio
import logging
import sys
import base64
import json
import requests
import os
from typing import Dict, Any, Optional
from dataclasses import dataclass
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, html
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
import aiohttp

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
API_KEY = os.getenv('BODYGRAM_API_KEY')
ORG_ID = os.getenv('BODYGRAM_ORG_ID')
API_URL = os.getenv('BODYGRAM_API_URL', f"https://platform.bodygram.com/api/orgs/{ORG_ID}/scans")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
BOT_NAME = os.getenv('BOT_NAME', 'SENS Fit Bot')
BOT_DESCRIPTION = os.getenv('BOT_DESCRIPTION', 'Telegram bot for SENS Fit bra size fitting')

# –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
SUPPORT_EMAIL = os.getenv('SUPPORT_EMAIL', 'support@sensfit.com')
PRIVACY_EMAIL = os.getenv('PRIVACY_EMAIL', 'privacy@sensfit.com')

# –°—Å—ã–ª–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä—ã
WILDBERRIES_BASE_URL = os.getenv('WILDBERRIES_BASE_URL', 'https://www.wildberries.ru/catalog/')
OZON_BASE_URL = os.getenv('OZON_BASE_URL', 'https://www.ozon.ru/product/')

# –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_AGE = int(os.getenv('DEFAULT_AGE', '25'))
DEFAULT_WEIGHT = int(os.getenv('DEFAULT_WEIGHT', '60000'))
DEFAULT_GENDER = os.getenv('DEFAULT_GENDER', 'female')

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
if not TOKEN:
    raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
if not API_KEY:
    raise ValueError("BODYGRAM_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
if not ORG_ID:
    raise ValueError("BODYGRAM_ORG_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class UserStates(StatesGroup):
    waiting_for_consent = State()
    waiting_for_method = State()
    waiting_for_height = State()
    waiting_for_front_photo = State()
    waiting_for_profile_photo = State()
    # –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–≤–∏–∑–∞
    waiting_for_quiz_comfortable_bra = State()
    waiting_for_quiz_current_size = State()
    waiting_for_quiz_underbust = State()
    waiting_for_quiz_bust = State()
    waiting_for_quiz_breast_shape = State()
    waiting_for_quiz_bra_type = State()
    waiting_for_quiz_priority = State()
    waiting_for_quiz_skin_tone = State()
    waiting_for_quiz_calculate = State()
    waiting_for_feedback = State()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data: Dict[int, Dict[str, Any]] = {}

# –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–π
dp = Dispatcher(storage=MemoryStorage())

def create_keyboard(*buttons: tuple[str, str]) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    keyboard = []
    for text, callback_data in buttons:
        keyboard.append([InlineKeyboardButton(text=text, callback_data=callback_data)])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –ö–û–ú–ê–ù–î–´ (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –Ω–∞—á–∞–ª–µ, –¥–æ –¥—Ä—É–≥–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤)
@dp.message(Command("help"))
async def help_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
    help_text = (
        f"ü§ñ {BOT_NAME} - –ø–æ–¥–±–æ—Ä –±—é—Å—Ç–≥–∞–ª—å—Ç–µ—Ä–∞\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start - –Ω–∞—á–∞—Ç—å –ø–æ–¥–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞\n"
        "/myfit - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é\n"
        "/reset - —Å–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ\n"
        "/privacy - –ø–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏\n"
        "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
    )
    await message.answer(help_text)

@dp.message(Command("myfit"))
async def myfit_command(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é"""
    user_id = message.from_user.id
    
    if user_id in user_data and user_data[user_id].get('last_recommendation'):
        recommendation = user_data[user_id]['last_recommendation']
        result_text = (
            f"–í–∞—à–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:\n\n"
            f"–†–∞–∑–º–µ—Ä: **{recommendation['size']}**\n"
            f"–ú–æ–¥–µ–ª—å: {recommendation['model']}\n"
            f"–°—Å—ã–ª–∫–∞: {recommendation['link']}"
        )
        await message.answer(result_text, parse_mode=ParseMode.MARKDOWN)
    else:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞.")

@dp.message(Command("reset"))
async def reset_command(message: Message):
    """–°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    if user_id in user_data:
        del user_data[user_id]
    await message.answer("–î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞.")

@dp.message(Command("privacy"))
async def privacy_command(message: Message):
    """–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"""
    privacy_text = (
        "üîí –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ SENS Fit\n\n"
        "‚Ä¢ –§–æ—Ç–æ —Ö—Ä–∞–Ω—è—Ç—Å—è –Ω–µ –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤\n"
        "‚Ä¢ –î–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞\n"
        "‚Ä¢ –ú—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º\n"
        "‚Ä¢ –°–æ–±–ª—é–¥–∞–µ–º 152-–§–ó –∏ GDPR\n\n"
        f"–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º: {PRIVACY_EMAIL}"
    )
    await message.answer(privacy_text)

@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data[user_id] = {
        'photos': {},
        'quiz_data': {},
        'last_recommendation': None
    }
    
    welcome_text = (
        "SENS Fit üëã\n\n"
        "–ü–æ–¥–±–µ—Ä—ë–º –±—é—Å—Ç–≥–∞–ª—å—Ç–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –Ω–µ –ø–æ—á—É–≤—Å—Ç–≤—É–µ—Ç–µ –Ω–∞ —Å–µ–±–µ.\n"
        "üí° –ù—É–∂–Ω–æ 1-2 –º–∏–Ω—É—Ç—ã –∏ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–æ–≤–∞—è –ª–µ–Ω—Ç–∞ *–∏–ª–∏* 2 —Ñ–æ—Ç–æ.\n\n"
        "–ì–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"
    )
    
    keyboard = create_keyboard(
        ("‚úÖ –î–∞", "consent_yes"),
        ("‚ùå –ù–µ—Ç", "consent_no")
    )
    
    await message.answer(welcome_text, reply_markup=keyboard)

@dp.callback_query(lambda c: c.data == "consent_no")
async def handle_consent_no(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–∞–∑–∞ –æ—Ç —Å–æ–≥–ª–∞—Å–∏—è"""
    await callback.message.edit_text(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ SENS Fit! üòä\n"
        "–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ /start"
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "consent_yes")
async def handle_consent_yes(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–≥–ª–∞—Å–∏—è –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ–≥–ª–∞—Å–∏—é –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö"""
    consent_text = (
        "–ú—ã –ø–æ–ø—Ä–æ—Å–∏–º –≤–∞—à–∏ –º–µ—Ä–∫–∏ / —Ñ–æ—Ç–æ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞.\n"
        "–§–æ—Ç–æ —Ö—Ä–∞–Ω–∏–º ‚â§ 24 —á, –ø–æ—Ç–æ–º —É–¥–∞–ª—è–µ–º.\n\n"
        "–ù–∞–∂–∏–º–∞—è ¬´–°–æ–≥–ª–∞—Å–µ–Ω¬ª, –≤—ã –¥–∞—ë—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ 152-–§–ó / GDPR."
    )
    
    keyboard = create_keyboard(
        ("‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", "data_consent_yes"),
        ("‚ùå –û—Ç–º–µ–Ω–∞", "data_consent_no")
    )
    
    await callback.message.edit_text(consent_text, reply_markup=keyboard)
    await callback.answer()

@dp.callback_query(lambda c: c.data == "data_consent_no")
async def handle_data_consent_no(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–∞–∑–∞ –æ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    await callback.message.edit_text(
        "–ü–æ–Ω—è—Ç–Ω–æ! –ë–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö –º—ã –Ω–µ –º–æ–∂–µ–º –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ä–∞–∑–º–µ—Ä.\n"
        "–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ /start"
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "data_consent_yes")
async def handle_data_consent_yes(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –¥–∞–Ω–Ω—ã–µ –∏ –≤—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞"""
    method_text = "–ö–∞–∫ –≤–∞–º —É–¥–æ–±–Ω–µ–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ä–∞–∑–º–µ—Ä?"
    
    keyboard = create_keyboard(
        ("üì∏ –§–æ—Ç–æ-—Å–∫–∞–Ω (—Ç–æ—á–Ω–µ–µ)", "method_photo"),
        ("‚úèÔ∏è –ö–≤–∏–∑ –±–µ–∑ —Ñ–æ—Ç–æ", "method_quiz")
    )
    
    await callback.message.edit_text(method_text, reply_markup=keyboard)
    await callback.answer()

# –§–û–¢–û-–°–ö–ê–ù –°–¶–ï–ù–ê–†–ò–ô
@dp.callback_query(lambda c: c.data == "method_photo")
async def handle_method_photo(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ç–æ-—Å–∫–∞–Ω–∞"""
    photo_instructions = (
        "–ù—É–∂–Ω–æ 2 —Ñ–æ—Ç–æ –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç:\n"
        "1‚É£ –°–ø–µ—Ä–µ–¥–∏   2‚É£ –ü—Ä–æ—Ñ–∏–ª—å\n\n"
        "‚Ä¢ –û–±—Ç—è–≥–∏–≤–∞—é—â–µ–µ –±–µ–ª—å—ë –∏–ª–∏ –ª—ë–≥–∫–∏–π —Ç–æ–ø\n"
        "‚Ä¢ –°–≤–µ—Ç–ª—ã–π –æ–¥–Ω–æ—Ä–æ–¥–Ω—ã–π —Ñ–æ–Ω\n"
        "‚Ä¢ –†—É–∫–∏ –≤–¥–æ–ª—å —Ç–µ–ª–∞\n"
        "‚Ä¢ –°–≤–µ—Ç –±–µ–∑ —Ä–µ–∑–∫–∏—Ö —Ç–µ–Ω–µ–π\n\n"
        "–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã, –Ω–∞–∂–º–∏—Ç–µ ¬´–°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ¬ª."
    )
    
    keyboard = create_keyboard(("üì∑ –°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ", "start_photo_process"))
    
    await callback.message.edit_text(photo_instructions, reply_markup=keyboard)
    await callback.answer()

@dp.callback_query(lambda c: c.data == "start_photo_process")
async def start_photo_process(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ñ–æ—Ç–æ-—Å–∫–∞–Ω–∞ - –∑–∞–ø—Ä–æ—Å —Ä–æ—Å—Ç–∞"""
    await state.set_state(UserStates.waiting_for_height)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (—Å–º) ‚Äî –Ω—É–∂–µ–Ω –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏.")
    await callback.answer()

@dp.message(UserStates.waiting_for_height)
async def handle_height_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ä–æ—Å—Ç–∞"""
    try:
        height = int(message.text)
        if 130 <= height <= 220:
            user_id = message.from_user.id
            user_data[user_id]['height'] = height
            
            await state.set_state(UserStates.waiting_for_front_photo)
            await message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ—Ä–æ–Ω—Ç–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ.")
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–æ—Å—Ç –æ—Ç 130 –¥–æ 220 —Å–º.")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

@dp.message(UserStates.waiting_for_front_photo)
async def handle_front_photo(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ—Ä–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ç–æ"""
    if not message.photo:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.")
        return
    
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
    photo = message.photo[-1]
    file = await message.bot.get_file(photo.file_id)
    file_path = file.file_path
    file_url = f"https://api.telegram.org/file/bot{TOKEN}/{file_path}"
    
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
    img_bytes = await download_image_from_url(file_url)
    if img_bytes is None:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ—Ä–æ–Ω—Ç–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ
    user_data[user_id]['photos']['front'] = img_bytes
    
    await state.set_state(UserStates.waiting_for_profile_photo)
    await message.answer("–¢–µ–ø–µ—Ä—å —Ñ–æ—Ç–æ —Å–±–æ–∫—É (–ª–µ–≤—ã–π –∏–ª–∏ –ø—Ä–∞–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å).")

@dp.message(UserStates.waiting_for_profile_photo)
async def handle_profile_photo(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ñ–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ç–æ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ API"""
    if not message.photo:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.")
        return
    
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
    photo = message.photo[-1]
    file = await message.bot.get_file(photo.file_id)
    file_path = file.file_path
    file_url = f"https://api.telegram.org/file/bot{TOKEN}/{file_path}"
    
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
    img_bytes = await download_image_from_url(file_url)
    if img_bytes is None:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ
    user_data[user_id]['photos']['profile'] = img_bytes
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    processing_msg = await message.answer("‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ç–æ‚Ä¶ (~5 —Å–µ–∫)")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ API
    result = await send_photos_to_api(user_id)
    
    if result:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
        user_data[user_id]['last_recommendation'] = result
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result_text = (
            f"‚úîÔ∏è –í–∞—à –∏–¥–µ–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: **{result['size']}**\n"
            f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –º–æ–¥–µ–ª—å:\n"
            f"‚Ä¢ {result['model']}\n"
            f"‚Ä¢ –°—Å—ã–ª–∫–∞: [üõçÔ∏è –ö—É–ø–∏—Ç—å –Ω–∞ WB]({result['link']})"
        )
        
        keyboard = create_keyboard(
            ("‚úÖ –ü–æ–¥–æ—à–ª–æ", "feedback_good"),
            ("‚ùå –ù–µ –ø–æ–¥–æ—à–ª–æ", "feedback_bad")
        )
        
        await processing_msg.edit_text(result_text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)
        await state.set_state(UserStates.waiting_for_feedback)
    else:
        await processing_msg.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# –ö–í–ò–ó –°–¶–ï–ù–ê–†–ò–ô
@dp.callback_query(lambda c: c.data == "method_quiz")
async def handle_method_quiz(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–≤–∏–∑–∞"""
    await state.set_state(UserStates.waiting_for_quiz_comfortable_bra)
    question_text = "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å —Å–µ–π—á–∞—Å –±—é—Å—Ç–≥–∞–ª—å—Ç–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å–∏–¥–∏—Ç –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ?"
    keyboard = create_keyboard(
        ("üëç –î–∞", "quiz_comfortable_yes"),
        ("üëé –ù–µ—Ç", "quiz_comfortable_no")
    )
    await callback.message.edit_text(question_text, reply_markup=keyboard)
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("quiz_comfortable_"))
async def handle_comfortable_choice(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É–¥–æ–±–Ω–æ–≥–æ –±—é—Å—Ç–≥–∞–ª—å—Ç–µ—Ä–∞"""
    user_id = callback.from_user.id
    comfortable_type = callback.data.split("_")[2]
    user_data[user_id]['quiz_data']['comfortable_bra'] = comfortable_type
    
    if comfortable_type == "yes":
        # –ï—Å–ª–∏ –µ—Å—Ç—å —É–¥–æ–±–Ω—ã–π –±—é—Å—Ç–≥–∞–ª—å—Ç–µ—Ä
        await state.set_state(UserStates.waiting_for_quiz_current_size)
        await callback.message.edit_text("–£–∫–∞–∂–∏—Ç–µ –µ–≥–æ —Ä–∞–∑–º–µ—Ä (–ø—Ä–∏–º–µ—Ä: 75C).")
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç —É–¥–æ–±–Ω–æ–≥–æ –±—é—Å—Ç–≥–∞–ª—å—Ç–µ—Ä–∞
        await state.set_state(UserStates.waiting_for_quiz_underbust)
        await callback.message.edit_text("–í–æ–∑—å–º–∏—Ç–µ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–æ–≤—É—é –ª–µ–Ω—Ç—É. –ò–∑–º–µ—Ä—å—Ç–µ –ø–æ–¥ –≥—Ä—É–¥—å—é (–ø–ª–æ—Ç–Ω–æ). –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ —Å–º.")
    await callback.answer()

@dp.message(UserStates.waiting_for_quiz_current_size)
async def handle_current_size_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞"""
    current_size = message.text.strip()
    user_id = message.from_user.id
    user_data[user_id]['quiz_data']['current_size'] = current_size
    
    await state.set_state(UserStates.waiting_for_quiz_underbust)
    await message.answer("–í–æ–∑—å–º–∏—Ç–µ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–æ–≤—É—é –ª–µ–Ω—Ç—É. –ò–∑–º–µ—Ä—å—Ç–µ –ø–æ–¥ –≥—Ä—É–¥—å—é (–ø–ª–æ—Ç–Ω–æ). –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ —Å–º.")

@dp.message(UserStates.waiting_for_quiz_underbust)
async def handle_underbust_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–±—Ö–≤–∞—Ç–∞ –ø–æ–¥ –≥—Ä—É–¥—å—é"""
    try:
        underbust = int(message.text)
        if 60 <= underbust <= 120:
            user_id = message.from_user.id
            user_data[user_id]['quiz_data']['underbust'] = underbust
            
            await state.set_state(UserStates.waiting_for_quiz_bust)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–±—Ö–≤–∞—Ç –≥—Ä—É–¥–∏ (—Å–º):")
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 60 –¥–æ 120 —Å–º.")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

@dp.message(UserStates.waiting_for_quiz_bust)
async def handle_bust_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–±—Ö–≤–∞—Ç–∞ –≥—Ä—É–¥–∏"""
    try:
        bust = int(message.text)
        if 70 <= bust <= 140:
            user_id = message.from_user.id
            user_data[user_id]['quiz_data']['bust'] = bust
            
            await state.set_state(UserStates.waiting_for_quiz_breast_shape)
            await message.answer("–ö–∞–∫ –±—ã –≤—ã –æ–ø–∏—Å–∞–ª–∏ —Ñ–æ—Ä–º—É –≥—Ä—É–¥–∏?", reply_markup=create_keyboard(
                ("üîª –®–∏—Ä–æ–∫–∞—è –±–∞–∑–∞", "breast_shape_wide"),
                ("üî∏ –£–∑–∫–∞—è / –æ–±—ä—ë–º–Ω–∞—è", "breast_shape_narrow"),
                ("üîπ –ù–∏–∑–∫–∏–π –ø–æ—Å–∞–¥", "breast_shape_low"),
                ("‚ùî –ù–µ –∑–Ω–∞—é", "breast_shape_unknown")
            ))
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 70 –¥–æ 140 —Å–º.")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

@dp.callback_query(lambda c: c.data.startswith("breast_shape_"))
async def handle_breast_shape_choice(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º—ã –≥—Ä—É–¥–∏"""
    user_id = callback.from_user.id
    breast_shape = callback.data.split("_")[2]
    user_data[user_id]['quiz_data']['breast_shape'] = breast_shape
    
    await state.set_state(UserStates.waiting_for_quiz_bra_type)
    await callback.message.edit_text("–ö–∞–∫–æ–π —Ç–∏–ø –±—é—Å—Ç–≥–∞–ª—å—Ç–µ—Ä–∞ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?", reply_markup=create_keyboard(
        ("üëô –ë—Ä–∞–ª–µ—Ç—Ç", "bra_type_bralette"),
        ("üí™ –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π", "bra_type_sport"),
        ("üíé –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π", "bra_type_classic"),
        ("üöÄ –õ—ë–≥–∫–∏–π push-up", "bra_type_pushup")
    ))
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("bra_type_"))
async def handle_bra_type_choice(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –±—é—Å—Ç–≥–∞–ª—å—Ç–µ—Ä–∞"""
    user_id = callback.from_user.id
    bra_type = callback.data.split("_")[2]
    user_data[user_id]['quiz_data']['bra_type'] = bra_type
    
    await state.set_state(UserStates.waiting_for_quiz_priority)
    await callback.message.edit_text("–ß—Ç–æ –¥–ª—è –≤–∞—Å –≤–∞–∂–Ω–µ–µ –≤—Å–µ–≥–æ?", reply_markup=create_keyboard(
        ("‚òÅÔ∏è –ö–æ–º—Ñ–æ—Ä—Ç", "priority_comfort"),
        ("üëÅ –≠—Å—Ç–µ—Ç–∏–∫–∞", "priority_aesthetics"),
        ("ü§∏‚Äç‚ôÄÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "priority_support")
    ))
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("priority_"))
async def handle_priority_choice(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞"""
    user_id = callback.from_user.id
    priority = callback.data.split("_")[1]
    user_data[user_id]['quiz_data']['priority'] = priority
    
    await state.set_state(UserStates.waiting_for_quiz_skin_tone)
    await callback.message.edit_text("–í–∞—à –æ—Ç—Ç–µ–Ω–æ–∫ –∫–æ–∂–∏ –±–ª–∏–∂–µ –∫‚Ä¶", reply_markup=create_keyboard(
        ("üåï –°–≤–µ—Ç–ª—ã–π", "skin_tone_light"),
        ("üèΩ –°—Ä–µ–¥–Ω–∏–π", "skin_tone_medium"),
        ("üèø –¢—ë–º–Ω—ã–π", "skin_tone_dark")
    ))
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("skin_tone_"))
async def handle_skin_tone_choice(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–Ω–∞ –∫–æ–∂–∏"""
    user_id = callback.from_user.id
    skin_tone = callback.data.split("_")[2]
    user_data[user_id]['quiz_data']['skin_tone'] = skin_tone
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–≤–∏–∑–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    quiz_data = user_data[user_id]['quiz_data']
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø—É–Ω–∫—Ç–∞–º–∏
    summary_text = "üìã –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã:\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—É–Ω–∫—Ç
    if 'comfortable_bra' in quiz_data:
        comfortable_text = "üëç –î–∞" if quiz_data['comfortable_bra'] == 'yes' else "üëé –ù–µ—Ç"
        summary_text += f"‚Ä¢ –ï—Å—Ç—å –ª–∏ –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π –±—é—Å—Ç–≥–∞–ª—å—Ç–µ—Ä: {comfortable_text}\n"
    
    if 'current_size' in quiz_data:
        summary_text += f"‚Ä¢ –¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä: {quiz_data['current_size']}\n"
    
    if 'underbust' in quiz_data:
        summary_text += f"‚Ä¢ –û–±—Ö–≤–∞—Ç –ø–æ–¥ –≥—Ä—É–¥—å—é: {quiz_data['underbust']} —Å–º\n"
    
    if 'bust' in quiz_data:
        summary_text += f"‚Ä¢ –û–±—Ö–≤–∞—Ç –≥—Ä—É–¥–∏: {quiz_data['bust']} —Å–º\n"
    
    if 'breast_shape' in quiz_data:
        shape_map = {
            'wide': "üîª –®–∏—Ä–æ–∫–∞—è –±–∞–∑–∞",
            'narrow': "üî∏ –£–∑–∫–∞—è / –æ–±—ä—ë–º–Ω–∞—è", 
            'low': "üîπ –ù–∏–∑–∫–∏–π –ø–æ—Å–∞–¥",
            'unknown': "‚ùî –ù–µ –∑–Ω–∞—é"
        }
        summary_text += f"‚Ä¢ –§–æ—Ä–º–∞ –≥—Ä—É–¥–∏: {shape_map.get(quiz_data['breast_shape'], quiz_data['breast_shape'])}\n"
    
    if 'bra_type' in quiz_data:
        type_map = {
            'bralette': "üëô –ë—Ä–∞–ª–µ—Ç—Ç",
            'sport': "üí™ –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π",
            'classic': "üíé –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π",
            'pushup': "üöÄ –õ—ë–≥–∫–∏–π push-up"
        }
        summary_text += f"‚Ä¢ –¢–∏–ø –±—é—Å—Ç–≥–∞–ª—å—Ç–µ—Ä–∞: {type_map.get(quiz_data['bra_type'], quiz_data['bra_type'])}\n"
    
    if 'priority' in quiz_data:
        priority_map = {
            'comfort': "‚òÅÔ∏è –ö–æ–º—Ñ–æ—Ä—Ç",
            'aesthetics': "üëÅ –≠—Å—Ç–µ—Ç–∏–∫–∞",
            'support': "ü§∏‚Äç‚ôÄÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞"
        }
        summary_text += f"‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority_map.get(quiz_data['priority'], quiz_data['priority'])}\n"
    
    if 'skin_tone' in quiz_data:
        tone_map = {
            'light': "üåï –°–≤–µ—Ç–ª—ã–π",
            'medium': "üèΩ –°—Ä–µ–¥–Ω–∏–π", 
            'dark': "üèø –¢—ë–º–Ω—ã–π"
        }
        summary_text += f"‚Ä¢ –¢–æ–Ω –∫–æ–∂–∏: {tone_map.get(quiz_data['skin_tone'], quiz_data['skin_tone'])}\n"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø—É–Ω–∫—Ç–∞–º–∏
    await callback.message.edit_text(summary_text)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å"
    await callback.message.answer("–¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏—Ç–µ ¬´–†–∞—Å—Å—á–∏—Ç–∞—Ç—å¬ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:", reply_markup=create_keyboard(
        ("üöÄ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å", "quiz_calculate")
    ))
    
    await state.set_state(UserStates.waiting_for_quiz_calculate)
    await callback.answer()

@dp.callback_query(lambda c: c.data == "quiz_calculate")
async def handle_quiz_calculate(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ ¬´–†–∞—Å—Å—á–∏—Ç–∞—Ç—å¬ª"""
    user_id = callback.from_user.id
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    processing_msg = await callback.message.edit_text("‚è≥ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä‚Ä¶ (~5 —Å–µ–∫)")
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–≤–∏–∑–∞
    quiz_result = calculate_quiz_size(user_id)
    
    if quiz_result:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
        user_data[user_id]['last_recommendation'] = quiz_result
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result_text = (
            f"‚úîÔ∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä: **{quiz_result['size']}**\n"
            f"–ü–æ–¥–æ–π–¥—ë—Ç –º–æ–¥–µ–ª—å:\n"
            f"‚Ä¢ {quiz_result['model']}\n"
            f"–°—Å—ã–ª–∫–∏: [WB]({quiz_result['link']}) [Ozon]({quiz_result['link']})"
        )
        
        keyboard = create_keyboard(
            ("‚úÖ –ü–æ–¥–æ—à–ª–æ", "feedback_good"),
            ("‚ùå –ù–µ –ø–æ–¥–æ—à–ª–æ", "feedback_bad")
        )
        
        await processing_msg.edit_text(result_text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)
        await state.set_state(UserStates.waiting_for_feedback)
    else:
        await processing_msg.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Ä–∞–∑–º–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    await callback.answer()

# –û–ë–†–ê–¢–ù–ê–Ø –°–í–Ø–ó–¨
@dp.callback_query(lambda c: c.data.startswith("feedback_"))
async def handle_feedback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    feedback_type = callback.data.split("_")[1]
    
    if feedback_type == "good":
        await callback.message.edit_text(
            "–°–ø–∞—Å–∏–±–æ! –≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–º —Å—Ç–∞—Ç—å —Ç–æ—á–Ω–µ–µ üíú\n\n"
            "–ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞."
        )
    else:
        await callback.message.edit_text(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! –ú—ã —É—á—Ç–µ–º —ç—Ç–æ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏.\n\n"
            "–ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞."
        )
    
    await callback.answer()

# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
async def download_image_from_url(file_url: str) -> Optional[bytes]:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL"""
    try:
        response = requests.get(file_url)
        if response.status_code == 200:
            return response.content
        return None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None

async def send_photos_to_api(user_id: int) -> Optional[Dict[str, str]]:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ –Ω–∞ API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    try:
        user_info = user_data[user_id]
        front_photo = user_info['photos']['front']
        profile_photo = user_info['photos']['profile']
        height = user_info['height']
        
        front_photo_base64 = base64.b64encode(front_photo).decode()
        profile_photo_base64 = base64.b64encode(profile_photo).decode()
        
        headers = {"Authorization": API_KEY}
        
        data = {
            "customScanId": f"scan_{user_id}",
            "photoScan": {
                "age": DEFAULT_AGE,
                "weight": DEFAULT_WEIGHT,
                "height": height * 10,  # API –æ–∂–∏–¥–∞–µ—Ç –≤ –º–º
                "gender": DEFAULT_GENDER,
                "frontPhoto": front_photo_base64,
                "rightPhoto": profile_photo_base64,
            },
        }
        
        response = requests.post(url=API_URL, headers=headers, json=data)
        
        if response.status_code == 200:
            api_data = response.json()
            return parse_api_response_for_size(api_data)
        else:
            logging.error(f"API request failed: {response.text}")
            return None
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ API: {e}")
        return None



def parse_api_response_for_size(data: Dict[str, Any]) -> Dict[str, str]:
    """–ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –±—é—Å—Ç–≥–∞–ª—å—Ç–µ—Ä–∞"""
    try:
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–º–µ—Ä–µ–Ω–∏–π
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        measurements = data.get('measurements', [])
        
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ (–∑–∞–≥–ª—É—à–∫–∞)
        size = "75C EU (34C US)"
        model = "SENS Seamless SoftTouch, —Ü–≤–µ—Ç Nude"
        link = f"{WILDBERRIES_BASE_URL}12345678"
        
        return {
            'size': size,
            'model': model,
            'link': link
        }
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ—Ç–≤–µ—Ç–∞ API: {e}")
        return None

def calculate_quiz_size(user_id: int) -> Optional[Dict[str, str]]:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–≤–∏–∑–∞"""
    try:
        quiz_data = user_data[user_id]['quiz_data']
        underbust = quiz_data['underbust']
        bust = quiz_data['bust']
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ –æ—Å–Ω–æ–≤—É
        if 'current_size' in quiz_data and quiz_data['current_size']:
            size = quiz_data['current_size']
        else:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–º–µ—Ä–µ–Ω–∏–π
            cup_size = bust - underbust
            if cup_size <= 10:
                cup = "A"
            elif cup_size <= 12:
                cup = "B"
            elif cup_size <= 14:
                cup = "C"
            elif cup_size <= 16:
                cup = "D"
            else:
                cup = "E"
            
            band_size = underbust
            if band_size < 70:
                band_size = 70
            elif band_size > 90:
                band_size = 90
            
            size = f"{band_size}{cup} EU"
        
        # –í—ã–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
        bra_type = quiz_data.get('bra_type', 'classic')
        priority = quiz_data.get('priority', 'comfort')
        skin_tone = quiz_data.get('skin_tone', 'light')
        
        if bra_type == 'bralette':
            model = "SENS Bralette Comfort (–±–µ–∂), –∫–æ–¥ 12345678"
        elif bra_type == 'sport':
            model = "SENS Sport Active (—á–µ—Ä–Ω—ã–π), –∫–æ–¥ 12345679"
        elif bra_type == 'pushup':
            model = "SENS Push-up Delight (–±–µ–∂), –∫–æ–¥ 12345680"
        else:  # classic
            model = "SENS SoftTouch Classic (–±–µ–∂), –∫–æ–¥ 12345678"
        
        link = f"{WILDBERRIES_BASE_URL}12345678"
        
        return {
            'size': size,
            'model': model,
            'link': link
        }
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Ä–∞–∑–º–µ—Ä–∞: {e}")
        return None

async def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())